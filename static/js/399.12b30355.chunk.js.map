{"version":3,"file":"static/js/399.12b30355.chunk.js","mappings":"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","sources":["components/regex.js","components/FormAddContact/FormAddContact.styled.js","components/checkUniq.js","components/FormAddContact/FormAddContact.js","components/FormChangeContact/FormChangeContact.styled.js","components/FormChangeContact/FormChangeContact.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Contact/Contact.styled.js","components/Contact/Contact.js","components/ContactsList/ContactList.styled.js","components/ContactsList/ContactsList.js","components/Modal/Modal.styled.js","components/Modal/Modal.js","pages/Contacts.js"],"sourcesContent":["export const customRegex = {\n    name: /^([a-zA-ZА-ЩЬЮЯҐЄІЇа-щьюяґєії]+['`’\" -])*((['`’\" -][a-zA-ZА-ЩЬЮЯҐЄІЇа-щьюяґєії])?[a-zA-ZА-ЩЬЮЯҐЄІЇа-щьюяґєії]*)*$/,\n    email: /^[^\\s,\\\\\\\\/\\\\|@][a-zA-Z\\d\\\\-]*@[^\\s,\\\\\\\\/\\\\|\\\\.@][a-zA-Z\\d\\\\-]*\\.[a-zA-Z]{2,}$/,\n    password: /^[^\\s.][a-zA-Z\\d-]{7,}$/,\n    number: /^[+]?\\d{2,7}[(\\- .\\s]?\\d{2,7}([)\\- .\\s]?\\d{2,7})*$/,\n}\n\n","import { Button, styled } from \"@mui/material\"\nimport { TextField as TextFieldFormik } from 'formik-mui';\n\nexport const StyledTextField = styled(TextFieldFormik)`\n  /* & label.Mui-focused {\n    color: black;\n  } \n\n  & .MuiOutlinedInput-root {\n    &.Mui-focused fieldset {\n      border-color: skyblue;\n    }\n  } */\n`;\n\nexport const StyledButton = styled(Button)`\n    background-color: skyblue;\n\n    &:hover, &:focus{\n        background-color: black;\n    }\n`\n","export const checkUniq = (name, data) => {\n    const newName = name.toLowerCase();\n    return data.find(({ name }) => name.toLowerCase() === newName);\n};   ","import { useDispatch } from \"react-redux\";\nimport { useCreateMutation, useGetContactsQuery } from 'redux/auth/apiSlice';\nimport { showFormAddContact } from 'redux/contacts/contactsSlice';\nimport { Report } from 'notiflix/build/notiflix-report-aio';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { customRegex } from \"components/regex\";\n\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport { StyledTextField, StyledButton } from \"./FormAddContact.styled\"\nimport { checkUniq } from 'components/checkUniq';\n\nconst DEFAULT_VALUES = {\n    name: '',\n    number: '',\n}\n\nexport const VALIDATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n        .trim()\n        .min(4, 'Too Short! Min 4 symbols')\n        .max(50, 'Too Long! Max 50 symbols')\n        .matches(\n            customRegex.name,\n            'Name may contain only Eng or Ua letters, apostrophe, spaces and dash'\n        )\n        .required(),\n    number: Yup.string()\n        .trim()\n        .min(6, 'Too Short! Min 6 symbols')\n        .max(18, 'Too Long! Max 18 symbols')\n        .matches(\n            customRegex.number,\n            'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        )\n        .required(),\n});\n\nexport const FormAddContact = () => {\n    const [ create ] = useCreateMutation()\n    const { data } = useGetContactsQuery()\n    const dispatch = useDispatch()\n\n    const handleSubmit = async ({ name, number }, { resetForm }) => {\n        const newContact = {\n            name,\n            number,\n        }\n   \n        if (checkUniq(newContact.name, data)) {\n            Report.warning(\n                'Sorry',\n                'Not a unique contact - write a new one!',\n                'Okay'\n            );\n            return   \n        }\n\n        try {\n            const userData = await create(newContact)    \n\n            if ( userData?.data ) {\n                Notify.success('The contact has been sent to storage', {\n                    position: 'center-top',\n                });\n                dispatch(showFormAddContact(false))\n                resetForm()   \n                return\n            }\n    \n            if ( userData?.error?.status === 400 ) {\n                Notify.failure('Error creating contact', {\n                    position: 'center-top',\n                });\n            }\n\n            if ( userData?.error?.status === 401 ) {\n                Notify.failure('Missing header with authorization token', {\n                    position: 'center-top',\n                });\n            }                          \n        } catch (error){\n            console.log(error)\n        }\n    };\n\n    return (     \n    <Container component=\"main\" maxWidth=\"xs\">\n        <Formik\n                initialValues={ DEFAULT_VALUES }\n                validationSchema={ VALIDATION_SCHEMA }\n                onSubmit={handleSubmit}\n            >       \n            {({ isValid, dirty }) => (             \n                <Form autoComplete=\"off\">\n                    <Grid container spacing={2} sx={{ mt: 3 }}>\n                        <Grid item xs={12}>\n                            <Field \n                                component={ StyledTextField }\n                                name=\"name\"\n                                type=\"text\"                                \n                                fullWidth \n                                title=\"min 2 symbols\"  \n                                label=\"Name\"      \n                                required          \n                            />                                \n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <Field \n                                component={ StyledTextField }\n                                name=\"number\"\n                                type=\"text\"                                \n                                fullWidth \n                                title=\"Example: 050-4838779; +972-50-4838779; +38(050)48 38 779\"  \n                                label=\"Phone number\"      \n                                required          \n                            />                     \n                        </Grid>                \n                    </Grid>\n                \n                    <StyledButton\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        sx={{ mt: 3, mb: 2 }}\n                        disabled={!(isValid && dirty)}\n                        >\n                        Create\n                    </StyledButton>\n                </Form> \n            )}   \n        </Formik>  \n    </Container>\n    )\n};","import { Button, styled } from \"@mui/material\"\nimport { TextField as TextFieldFormik } from 'formik-mui';\n\nexport const StyledTextField = styled(TextFieldFormik)`\n  /* & label.Mui-focused {\n    color: black;\n  } \n\n  & .MuiOutlinedInput-root {\n    &.Mui-focused fieldset {\n      border-color: skyblue;\n    }\n  } */\n`;\n\nexport const StyledButton = styled(Button)`\n    background-color: skyblue;\n\n    &:hover, &:focus{\n        background-color: black;\n    }\n`","import { useDispatch, useSelector } from \"react-redux\";\nimport { clearChange } from 'redux/contacts/contactsSlice';\nimport { useChangeMutation, useGetContactsQuery } from 'redux/auth/apiSlice';\nimport { selectItemChange } from 'redux/selectors';\nimport { Report } from 'notiflix/build/notiflix-report-aio';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { customRegex } from \"components/regex\";\n\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport { StyledTextField, StyledButton } from \"./FormChangeContact.styled\"\nimport { checkUniq } from \"components/checkUniq\";\n\nconst VALIDATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n        .trim()\n        .min(4, 'Too Short! Min 4 symbols')\n        .max(50, 'Too Long! Max 50 symbols')\n        .matches(\n            customRegex.name,\n            'Name may contain only Eng or Ua letters, apostrophe, spaces and dash'\n        )\n        .required(),\n    number: Yup.string()\n        .trim()\n        .min(6, 'Too Short! Min 6 symbols')\n        .max(18, 'Too Long! Max 18 symbols')\n        .matches(\n            customRegex.number,\n            'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        )\n        .required(),\n});\n\nexport const FormChangeContact = () => {\n    const [ change ] = useChangeMutation()\n    const { data } = useGetContactsQuery()\n    const {id, name, number} = useSelector(selectItemChange)\n    const dispatch = useDispatch()\n\n    const handleSubmit = async ({ name: oldName, number: oldNumber }, { resetForm }) => {\n        const newContact = {\n            id,\n            name: oldName,\n            number: oldNumber,\n        }  \n        \n        if (checkUniq(newContact.name, data)) {   \n            Report.warning(\n                'Attention',\n                'Not a unique contact - write a new name!',\n                'Okay');\n            return\n        }\n\n        try {           \n            const userData = await change(newContact)  \n\n            if ( userData?.data ) {\n                Notify.success('The contact has been change in storage',\n                    { position: 'center-top' })  \n                dispatch(clearChange())\n                resetForm()  \n                return\n            }\n\n            if ( userData?.error?.status === 400 ) {\n                Notify.failure('Contact update failed', {\n                    position: 'center-top',\n                });\n            }\n\n            if ( userData?.error?.status === 401 ) {\n                Notify.failure('Missing header with authorization token', {\n                    position: 'center-top',\n                });\n            } \n        } catch (error){\n            console.log(error)\n        }  \n\n\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <Formik\n                initialValues={{ name, number }}\n                validationSchema={ VALIDATION_SCHEMA }\n                onSubmit={handleSubmit}\n            >       \n                {({ isValid, dirty }) => (             \n                    <Form autoComplete=\"off\">\n                        <Grid container spacing={2} sx={{ mt: 3 }}>\n                            <Grid item xs={12}>\n                                <Field \n                                    component={ StyledTextField }\n                                    name=\"name\"\n                                    type=\"text\"                                \n                                    fullWidth \n                                    title=\"min 2 symbols\"  \n                                    label=\"Name\"      \n                                    required                                                                           \n                                />            \n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <Field \n                                    component={ StyledTextField }\n                                    name=\"number\"\n                                    type=\"text\"                                \n                                    fullWidth \n                                    title=\"Example: 050-4838779; +972-50-4838779; +38(050)48 38 779\"                      \n                                    label=\"Phone number\"      \n                                    required                                            \n                                />              \n                            </Grid>                \n                        </Grid>\n\n                        <StyledButton\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                            disabled={!(isValid && dirty)}\n                            >\n                            Change\n                        </StyledButton>\n                    </Form> \n                )}\n            </Formik>      \n        </Container>\n    )\n};","import styled from '@emotion/styled';\nimport {TextField, styled as styledMui } from \"@mui/material\"\n\nexport const StyledWrap = styled.div`\n    position: sticky;\n    display: inline-block;\n    top: 70px;\n    transform: translateX(-47px);\n    z-index: 1000;\n    margin-bottom: 10px;\n    border-radius: 5px;\n    background-color: white;\n`\n\nexport const StyledTextField = styledMui(TextField)`\n  & label.Mui-focused {\n    color: black;\n  } \n\n  & .MuiOutlinedInput-root {\n    &.Mui-focused fieldset {\n      border-color: skyblue;\n    }\n  }\n`;","import { useDispatch } from \"react-redux\";\nimport { setFilter } from \"../../redux/contacts/contactsSlice\"\nimport { StyledWrap, StyledTextField } from \"./Filter.styled\"\n\nexport const Filter = () => {\n    const dispatch = useDispatch()\n\n    const handleSetFilter = ({currentTarget})=>{\n        dispatch(setFilter(currentTarget.value))\n    }\n\n    return (       \n        <StyledWrap>\n            <StyledTextField                                        \n                    name=\"find\"\n                    type=\"text\"\n                    label=\"Find contacts by name\"\n                    autoComplete=\"off\"\n                    onChange={handleSetFilter}\n            />\n        </StyledWrap>            \n    );\n};","import styled from '@emotion/styled';\nimport {Button, styled as styledMui } from \"@mui/material\"\nimport ControlCameraIcon from '@mui/icons-material/ControlCamera';\n\nexport const StyledItem = styled.li`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin: 0;\n    padding: 0;    \n`\n\nexport const StyledContact = styled.div`\n    display: flex;\n    align-items: center;\n`\n\nexport const StyledControlCameraIcon = styledMui(ControlCameraIcon)`\n    margin-right: 5px;\n`\n\nexport const StyledButton = styledMui(Button)`\n    padding: 6px 6px;\n    background-color: skyblue;\n\n    &:hover, &:focus{\n        background-color: black;\n    }\n`","import { useDispatch } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport { changeContact } from \"../../redux/contacts/contactsSlice\" // deleteContact, \nimport { useRemoveMutation } from \"../../redux/auth/apiSlice\" //useChangeMutation\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { StyledItem, StyledContact, StyledControlCameraIcon, StyledButton} from \"./Contact.styled\"\n\nexport const Contact = ({ contact }) => {\n    const { id, name, number } = contact;\n    const [ remove ] = useRemoveMutation()\n    const dispatch = useDispatch()\n\n    const handleDeleteContact = async ()=>{\n        try{\n            await remove(id)\n            Notify.success(\n            'The contact has been remove from storage',\n            { position: 'center-top' })\n        } catch(error){\n            console.log(error)\n        } \n    }\n\n    const handleChangeContact = async ()=>{\n        dispatch(changeContact(contact))\n    }\n\n    return (\n        <StyledItem>\n            <StyledContact>\n                <StyledControlCameraIcon/>\n                {name}: {number}\n            </StyledContact>\n            <ButtonGroup variant=\"contained\" aria-label=\"outlined primary button group\">\n            <StyledButton\n                aria-label=\"delete\" \n                onClick={handleDeleteContact}\n                >\n                    <DeleteIcon/>\n            </StyledButton>\n            <StyledButton \n                aria-label=\"change\"\n                onClick={handleChangeContact}\n                >\n                    <EditIcon/>\n                </StyledButton>\n            </ButtonGroup>           \n        </StyledItem>\n    );\n};\n\nContact.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number,            \n          ]),\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    }).isRequired,\n};","import styled from '@emotion/styled';\nimport { IconButton, styled as styledMui } from \"@mui/material\"\n\nexport const StyledList = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    margin: 0;\n    padding: 0;\n    list-style: none;\n`\n\nexport const StyledIconButton = styledMui(IconButton)`\n    position: sticky;\n    top: 75px;\n    left: 500px;\n    z-index: 1000;\n\n    color: white;\n    background-color: skyblue;\n\n    &:hover, &:focus{\n        color: green;\n        background-color: black;\n    }\n\n    @media screen and (min-width: 500px) {  \n        left: 50%;\n    }\n`","import { useDispatch, useSelector} from \"react-redux\";\nimport { selectFilter } from 'redux/selectors';\nimport { useGetContactsQuery } from \"redux/auth/apiSlice\";\nimport { showFormAddContact } from 'redux/contacts/contactsSlice';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { Filter } from 'components/Filter';\nimport { Contact } from 'components/Contact';\n\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport { StyledList, StyledIconButton } from \"./ContactList.styled\"\n\nexport const ContactsList = () => {\n    const {data, isLoading, error, isSuccess} = useGetContactsQuery()\n    const filter = useSelector(selectFilter)\n    const dispatch = useDispatch()\n\n    const handleAddContact = ()=>{\n        dispatch(showFormAddContact(true))\n    }\n\n    if(isLoading && !error){\n        return (\n            <b>Request in progress...</b>\n        )\n    }\n\n    if (error){\n        Notify.failure(error, { position: 'center-top' })\n        return (    \n            <>{!isLoading && <b>Error</b>}</>                         \n        )\n    }      \n\n    if (isSuccess) {\n        const findName = filter.toLowerCase();        \n\n        const visibleContacts = data\n            .filter(({ name }) => name.toLowerCase().includes(findName))\n            .sort((firstContact, secondContact) => {\n                return firstContact.name.localeCompare(secondContact.name)\n            })\n  \n        return (\n            <>\n                <StyledIconButton \n                    aria-label=\"add\" \n                    size=\"large\"\n                    onClick={handleAddContact}\n                >\n                    <PersonAddIcon/>\n                </StyledIconButton>\n\n                <Filter/>\n\n                <StyledList>\n                    {visibleContacts.length !== 0 && visibleContacts.map(item => <Contact key={item.id} contact={item}/>)}                        \n                </StyledList>\n            </>\n        )   \n    } \n}","import { Box, Button, styled as styledMui } from '@mui/material';\n\nexport const StyledBox = styledMui(Box)`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);   \n    padding: 10px;\n    min-width: 320px;\n    background-color: white;\n    border: 2px solid #000;\n    box-shadow: 24px;\n    border-radius: 5px;\n`\n\nexport const StyledButton = styledMui(Button)`\n    position: absolute;\n    right: 10px;\n    padding: 6px 6px;\n    min-width: auto;\n    background-color: skyblue;\n\n    &:hover, &:focus{\n        color: red;\n        background-color: black;\n    }\n`","import { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport Typography from '@mui/material/Typography';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Modal as ModalMui } from '@mui/material';\nimport { StyledButton, StyledBox } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport class Modal extends Component {\n  render() {\n    const { title, children, closeModel } = this.props;\n\n    return createPortal(\n        <ModalMui\n            open={true}\n            onClose={closeModel}\n        >            \n            <StyledBox>\n                <StyledButton \n                    aria-label=\"close\"\n                    onClick={closeModel}\n                    >\n                        <CloseIcon/>\n                </StyledButton>\n\n                <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                { title }\n                </Typography>\n\n                { children }\n            </StyledBox>\n        </ModalMui>,\n      modalRoot\n    );\n  }\n}\n\nModal.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  closeModel: PropTypes.func.isRequired,\n};","import { useDispatch, useSelector } from \"react-redux\";\nimport { selectIsChange, selectIsAdd } from 'redux/selectors';\nimport { clearChange, showFormAddContact } from 'redux/contacts/contactsSlice';\n\nimport { FormAddContact } from 'components/FormAddContact';\nimport { FormChangeContact } from 'components/FormChangeContact';\nimport { ContactsList } from 'components/ContactsList';\nimport { Modal } from \"components/Modal\";\n\nconst Contacts = () => {\n  const isChange = useSelector(selectIsChange)\n  const isAdd = useSelector(selectIsAdd)\n  const dispatch = useDispatch()\n\n  const closeModel = () => {\n    dispatch(clearChange())\n    dispatch(showFormAddContact(false))\n  }\n  \n  return (\n      <div>                 \n          {isAdd && <Modal title='Add contact' children={<FormAddContact/>} closeModel={closeModel}/>}\n\n          {isChange &&  <Modal title='Change contact' children={<FormChangeContact/>} closeModel={closeModel}/>}\n\n          <ContactsList/>\n    </div>\n  )\n}\n\nexport default Contacts"],"names":["customRegex","name","email","password","number","StyledTextField","styled","TextFieldFormik","StyledButton","Button","checkUniq","data","newName","toLowerCase","find","DEFAULT_VALUES","VALIDATION_SCHEMA","Yup","shape","trim","min","max","matches","required","FormAddContact","useCreateMutation","create","useGetContactsQuery","dispatch","useDispatch","handleSubmit","resetForm","newContact","Report","userData","Notify","position","showFormAddContact","error","status","console","log","Container","component","maxWidth","initialValues","validationSchema","onSubmit","isValid","dirty","autoComplete","Grid","container","spacing","sx","mt","item","xs","type","fullWidth","title","label","variant","mb","disabled","FormChangeContact","useChangeMutation","change","useSelector","selectItemChange","id","oldName","oldNumber","clearChange","StyledWrap","styledMui","TextField","Filter","onChange","currentTarget","setFilter","value","StyledItem","StyledContact","StyledControlCameraIcon","ControlCameraIcon","Contact","contact","useRemoveMutation","remove","handleDeleteContact","handleChangeContact","changeContact","ButtonGroup","onClick","Delete","Edit","StyledList","StyledIconButton","IconButton","ContactsList","isLoading","isSuccess","filter","selectFilter","findName","visibleContacts","includes","sort","firstContact","secondContact","localeCompare","size","PersonAdd","length","map","StyledBox","Box","modalRoot","document","querySelector","Modal","this","props","children","closeModel","createPortal","open","onClose","Close","Typography","Component","isChange","selectIsChange","isAdd","selectIsAdd"],"sourceRoot":""}