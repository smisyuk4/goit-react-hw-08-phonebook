{"version":3,"file":"static/js/651.4eb5aa78.chunk.js","mappings":"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","sources":["components/FormAddContact/FormAddContact.js","components/FormChangeContact/FormChangeContact.js","components/Filter/Filter.js","components/Contact/Contact.js","components/ContactsList/ContactsList.js","components/Title/Title.js","pages/Contacts.js"],"sourcesContent":["// import { useSelector } from \"react-redux\"; //useDispatch\n// import { addContact } from \"../../redux/operations\"\n// import { selectContacts } from 'redux/selectors';\n// import {Form, Field, Formik, ErrorMessage } from 'formik';\n// import * as Yup from 'yup';\n\nimport { Report } from 'notiflix/build/notiflix-report-aio';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import { IconContext } from 'react-icons';\n// import {\n//     RiContactsFill,\n//     RiUserVoiceFill,\n//     RiUserFollowFill,\n// } from 'react-icons/ri';\n\n// const REGEX_NAME = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n// const REGEX_NUMBER =\n//     /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\n// const contactSchema = Yup.object().shape({\n//     name: Yup.string()\n//         .min(2)\n//         .max(20)\n//         .matches(\n//             REGEX_NAME,\n//             'Name may contain only letters, apostrophe, dash and spaces'\n//         )\n//         .required(),\n//     number: Yup.string()\n//         .matches(\n//             REGEX_NUMBER,\n//             'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n//         )\n//         .required(),\n// });\n\nimport { useCreateMutation, useGetContactsQuery } from 'redux/auth/apiSlice';\n\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme();\n\nexport const FormAddContact = () => {\n    const [ create ] = useCreateMutation()\n    const { data } = useGetContactsQuery()\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const form = new FormData(event.currentTarget);\n\n        const newContact = {\n            name: form.get('name'),\n            number: form.get('number'),            \n        }\n\n            // check uniq contact\n        if (!checkUniq(newContact.name, data)) {\n            try {\n                await create(newContact)                \n                Notify.success('The contact has been sent to storage', {\n                                position: 'center-top',\n                            });\n            } catch (error){\n                console.log(error)\n            }\n            event.target.reset()\n        } else {\n            Report.warning(\n                'Sorry',\n                'Not a unique contact - write a new one!',\n                'Okay'\n            );\n        }\n    };\n\n    return (\n    <ThemeProvider theme={theme}>\n    <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n        sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n        }}\n        >\n            <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 3 }}>\n                <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <TextField                    \n                    name=\"name\"\n                    type=\"text\"\n                    required\n                    fullWidth \n                    label=\"User Name\"\n                    autoComplete=\"off\"    \n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                    required\n                    fullWidth\n                    label=\"Phone number\"\n                    name=\"number\"\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    />\n                </Grid>                \n                </Grid>\n                <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    sx={{ mt: 3, mb: 2 }}\n                    >\n                    Create\n                </Button>\n            </Box>\n        </Box>       \n    </Container>\n    </ThemeProvider>\n\n    )\n};\n\nconst checkUniq = (name, data) => {\n    const newName = name.toLowerCase();\n    return data.find(({ name }) => name.toLowerCase() === newName);\n};\n    \n    // return (\n    //     <p>form</p>\n        // <Formik\n        //     initialValues={{ name: '', number: '' }}\n        //     onSubmit={sendContact}\n        //     validationSchema={contactSchema}\n        // >\n        //     <Form autoComplete=\"off\">\n        //         <label>\n        //             <IconContext.Provider value={{ className: 'global-icon' }}>\n        //                 <RiContactsFill />\n        //             </IconContext.Provider>\n        //             Name:\n        //             <Field type=\"text\" name=\"name\" />\n        //             <ErrorMessage name=\"name\" component={'span'} />\n        //         </label>\n        //         <label>\n        //             <IconContext.Provider value={{ className: 'global-icon' }}>\n        //                 <RiUserVoiceFill />\n        //             </IconContext.Provider>\n        //             Number:\n        //             <Field type=\"tel\" name=\"number\" />\n        //             <ErrorMessage name=\"number\" component={'span'} />\n        //         </label>\n        //         <button type=\"submit\">\n        //             <IconContext.Provider value={{ className: 'global-icon' }}>\n        //                 <RiUserFollowFill />\n        //             </IconContext.Provider>\n        //             Add contact\n        //         </button>\n        //     </Form>\n        // </Formik>\n    // );\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { clearChange } from 'redux/contacts/contactsSlice';\nimport { useChangeMutation } from 'redux/auth/apiSlice';\nimport { selectItemChange } from 'redux/selectors';\n\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst theme = createTheme();\n\nexport const FormChangeContact = () => {\n    const [ change ] = useChangeMutation()\n    const {id, name, number} = useSelector(selectItemChange)\n    const dispatch = useDispatch()\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const form = new FormData(event.currentTarget);\n\n        const newContact = {\n            id,\n            name: form.get('name'),\n            number: form.get('number'),            \n        }\n\n        event.target.reset()\n\n        try {\n            if(name !== newContact.name || number !==newContact.number) {\n                await change(newContact) \n                Notify.success(\n                    'The contact has been change in storage',\n                    { position: 'center-top' })           \n            }\n            dispatch(clearChange())\n        } catch (error){\n            console.log(error)\n        }\n    }\n\n    return (\n    <ThemeProvider theme={theme}>\n    <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n        sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n        }}\n        >\n            <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 3 }}>\n                <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <TextField                    \n                    name=\"name\"\n                    type=\"text\"\n                    defaultValue={name}\n                    required\n                    fullWidth \n                    label=\"User Name\"\n                    autoComplete=\"off\"             \n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                    required\n                    fullWidth\n                    label=\"Phone number\"\n                    name=\"number\"\n                    type=\"text\"\n                    defaultValue={number}\n                    autoComplete=\"off\"\n                    />\n                </Grid>                \n                </Grid>\n                <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    sx={{ mt: 3, mb: 2 }}\n                    >\n                    Change\n                </Button>\n            </Box>\n        </Box>       \n    </Container>\n    </ThemeProvider>\n\n    )\n};\n\n// defaultValue","import { useDispatch } from \"react-redux\";\nimport { setFilter } from \"../../redux/contacts/contactsSlice\"\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\n\nexport const Filter = () => {\n    const dispatch = useDispatch()\n\n    const handleSetFilter = ({currentTarget})=>{\n        dispatch(setFilter(currentTarget.value))\n    }\n\n    return (       \n        <Box component=\"div\" sx={{ position: \"sticky\", top: \"70px\"}}>\n            <TextField                                        \n                    name=\"find\"\n                    type=\"text\"\n                    label=\"Find contacts by name\"\n                    autoComplete=\"off\"\n                    onChange={handleSetFilter}\n                    />\n            </Box>\n            \n    );\n};","import { useDispatch } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport { changeContact } from \"../../redux/contacts/contactsSlice\" // deleteContact, \nimport { useRemoveMutation } from \"../../redux/auth/apiSlice\" //useChangeMutation\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nexport const Contact = ({ contact }) => {\n    const { id, name, number } = contact;\n    const [ remove ] = useRemoveMutation()\n    const dispatch = useDispatch()\n\n    const handleDeleteContact = async ()=>{\n        try{\n            await remove(id)\n            Notify.success(\n            'The contact has been remove from storage',\n            { position: 'center-top' })\n        } catch(error){\n            console.log(error)\n        } \n    }\n\n    const handleChangeContact = async ()=>{\n        dispatch(changeContact(contact))\n    }\n\n    return (\n        <li>\n            {name}: {number}\n            <button\n                type=\"button\"\n                onClick={handleDeleteContact}\n            >\n                Remove\n            </button>\n            <button\n                type=\"button\"\n                onClick={handleChangeContact}\n            >\n                Change\n            </button>\n        </li>\n    );\n};\n\nContact.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number,            \n          ]),\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    }).isRequired,\n};","import { useSelector} from \"react-redux\";\nimport { selectFilter } from 'redux/selectors';\nimport { useGetContactsQuery } from \"redux/auth/apiSlice\";\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { Filter } from 'components/Filter';\nimport { Contact } from 'components/Contact';\n\nexport const ContactsList = () => {\n    const {data, isLoading, error, isSuccess} = useGetContactsQuery()\n    const filter = useSelector(selectFilter)\n\n    if(isLoading && !error){\n        return (\n            <b>Request in progress...</b>\n        )\n    }\n\n    if (error){\n        Notify.failure(error, { position: 'center-top' })\n        return (    \n            <>{!isLoading && <b>Error</b>}</>                         \n        )\n    }      \n\n    if (isSuccess) {\n        const findName = filter.toLowerCase();\n        const visibleContacts = data.filter(({ name }) =>\n            name.toLowerCase().includes(findName));\n \n        return (\n            <div>\n                <Filter/>\n                <ul>\n                    {visibleContacts.length !== 0 && visibleContacts.map(item => <Contact key={item.id} contact={item}/>)}                        \n                </ul>\n            </div>\n        )   \n    } \n}","import PropTypes from 'prop-types';\n\nexport const Title = ({ title, children }) => {\n    return (\n        <section>\n            <h2>{title}</h2>\n\n            {children}\n        </section>\n    );\n};\n\nTitle.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.element.isRequired,\n};","import { useSelector } from \"react-redux\";\nimport { selectIsChange } from 'redux/selectors';\nimport { FormAddContact } from 'components/FormAddContact';\nimport { FormChangeContact } from 'components/FormChangeContact';\nimport { ContactsList } from 'components/ContactsList';\nimport { Title } from 'components/Title';\n\nconst Contacts = () => {\n  const isChange = useSelector(selectIsChange)\n\n    return (\n        <div>\n        <Title\n          title=\"Add contact\"\n          children={\n            <FormAddContact/>\n          }\n        />\n\n       {isChange &&  \n       <Title\n        title='Change contact'\n        children={<FormChangeContact/>}\n        />}\n        \n        <Title\n          title=\"Contacts\"\n          children={\n            <ContactsList/>\n          }\n        />\n      </div>\n    )\n}\n\nexport default Contacts"],"names":["theme","createTheme","FormAddContact","useCreateMutation","create","data","useGetContactsQuery","handleSubmit","event","preventDefault","form","FormData","currentTarget","newContact","name","get","number","checkUniq","Notify","position","console","log","target","reset","Report","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","onSubmit","mt","Grid","container","spacing","item","xs","TextField","type","required","fullWidth","label","autoComplete","Button","variant","mb","newName","toLowerCase","find","FormChangeContact","useChangeMutation","change","useSelector","selectItemChange","id","dispatch","useDispatch","clearChange","defaultValue","Filter","top","onChange","setFilter","value","Contact","contact","useRemoveMutation","remove","handleDeleteContact","handleChangeContact","changeContact","onClick","ContactsList","isLoading","error","isSuccess","filter","selectFilter","findName","visibleContacts","includes","length","map","Title","title","children","isChange","selectIsChange"],"sourceRoot":""}