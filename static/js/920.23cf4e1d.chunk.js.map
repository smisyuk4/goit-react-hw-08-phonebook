{"version":3,"file":"static/js/920.23cf4e1d.chunk.js","mappings":"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","sources":["components/FormRegUser/FormRegUser.styled.js","components/FormRegUser/FormRegUser.js","pages/Registration.js"],"sourcesContent":["import { Grid, IconButton, Button, styled } from \"@mui/material\"\nimport { TextField as TextFieldFormik } from 'formik-mui';\n\nimport { Link } from \"react-router-dom\"\n\n// class=\"MuiFormHelperText-root Mui-error MuiFormHelperText-sizeMedium MuiFormHelperText-contained MuiFormHelperText-filled css-1wc848c-MuiFormHelperText-root\"\n\nexport const StyledTextField = styled(TextFieldFormik)`\n// aria-hidden=\"true\"\n\n  & label.Mui-focused {\n    color: black;\n  } \n\n  & .MuiOutlinedInput-root {\n    &.Mui-focused fieldset {\n      border-color: skyblue;\n    }\n  }\n`;\n\nexport const StyledGrid = styled(Grid)`\n  position: relative;\n`\n\nexport const StyledIconButton = styled(IconButton)`\n  position: absolute;\n  top: 23px;\n  right: 10px;\n`\n\nexport const StyledButton = styled(Button)`\n    padding: 6px 6px;\n    background-color: skyblue;\n\n    &:hover, &:focus{\n        background-color: black;\n    }\n`\n\nexport const StyledLink = styled(Link)`\n    color: inherit;\n`","import { useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { setCredentials } from 'redux/auth/authSlice';\nimport { useSignupMutation } from 'redux/auth/apiSlice';\n\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport { StyledTextField, StyledGrid, StyledIconButton, StyledButton, StyledLink } from \"./FormRegUser.styled\"\n\nconst DEFAULT_VALUES = {\n    name: '',\n    email: '',\n    password: '',\n  }\n\nconst VALIDATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n        .min(4, 'Too Short!')\n        .max(50, 'Too Long!')\n        .required('Required'),    \n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string()\n        .min(8, 'Too Short! Min 8 symbols!')\n        .required('Required'),\n  });\n\nexport const FormRegUser = () => {\n    const [ signup ] = useSignupMutation()\n    const [ showPassword, setShowPassword ] = useState(false);\n    const dispatch = useDispatch()\n\n    const handleClickShowPassword = () => setShowPassword((show) => !show);\n\n    const handleSubmit = async ({ name, email, password }, { resetForm }) => {\n        const newUser = {\n            name,\n            email,\n            password,\n        }\n        console.log(newUser)\n\n        resetForm()\n\n        try {\n            const userData = await signup(newUser)        \n            dispatch(setCredentials({...userData}))\n        } catch (error){\n            console.log(error)\n        }\n    };\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <Formik\n                initialValues={ DEFAULT_VALUES }\n                validationSchema={ VALIDATION_SCHEMA }\n                onSubmit={handleSubmit}\n            >       \n            {({ isValid, dirty }) => (             \n                <Form autoComplete=\"off\">\n                        <Grid container spacing={2} sx={{ mt: 3 }}>\n                            <Grid item xs={12}>                           \n                                <Field \n                                    component={ StyledTextField }\n                                    name=\"name\"\n                                    type=\"text\"                                \n                                    fullWidth \n                                    title=\"min 4 symbols\"  \n                                    label=\"User Name\"      \n                                    required          \n                                />        \n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <Field\n                                    component={ StyledTextField }\n                                    fullWidth\n                                    label=\"Email\"\n                                    name=\"email\"\n                                    type=\"email\"  \n                                    required                \n                                />                            \n                            </Grid>\n\n                            <StyledGrid item xs={12}>\n                                <Field\n                                    component={ StyledTextField }\n                                    fullWidth\n                                    label=\"Password\"\n                                    name=\"password\"\n                                    type={showPassword ? 'text' : 'password'} \n                                    title=\"min 8 symbols\"       \n                                    required                          \n                                />       \n                                <StyledIconButton\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={handleClickShowPassword}                          \n                                >\n                                    {showPassword ? <VisibilityOff /> : <Visibility />}\n                                </StyledIconButton>                     \n                            </StyledGrid>\n                        </Grid>\n\n                        <StyledButton                      \n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                            type=\"submit\"                           \n                            disabled={!(isValid && dirty)}\n                            >\n                            Sign Up\n                        </StyledButton>\n                    \n                        <Grid container justifyContent=\"center\">\n                            <Grid item>\n                                <StyledLink to=\"/login\">\n                                    Already have an account? Login\n                                </StyledLink>    \n                            </Grid>\n                        </Grid>        \n                </Form> \n            )}   \n            </Formik>  \n        </Container>\n    );\n}","import { FormRegUser } from \"../components/FormRegUser\"\n\nconst Registration = () => {\n    return(     \n        <>\n        <FormRegUser/>\n        </>\n    )\n}\n\nexport default Registration"],"names":["StyledTextField","styled","TextFieldFormik","StyledGrid","Grid","StyledIconButton","IconButton","StyledButton","Button","StyledLink","Link","DEFAULT_VALUES","name","email","password","VALIDATION_SCHEMA","Yup","shape","min","max","required","FormRegUser","useSignupMutation","signup","useState","showPassword","setShowPassword","dispatch","useDispatch","handleClickShowPassword","show","handleSubmit","resetForm","newUser","console","log","userData","setCredentials","Container","component","maxWidth","initialValues","validationSchema","onSubmit","isValid","dirty","autoComplete","container","spacing","sx","mt","item","xs","type","fullWidth","title","label","onClick","VisibilityOff","Visibility","variant","mb","disabled","justifyContent","to"],"sourceRoot":""}